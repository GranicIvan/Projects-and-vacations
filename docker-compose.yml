services:
  database:
    image: 'postgres:17.6'
    container_name: database_container
    environment:
      - 'POSTGRES_DB=mydatabase'
      - 'POSTGRES_PASSWORD=secret'
      - 'POSTGRES_USER=myuser'
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U myuser -d mydatabase"]
      interval: 10s
      timeout: 5s
      retries: 5
      
  backend:
    build: 
      context: ./task1
      dockerfile: Dockerfile
    container_name: backend_container
    depends_on:
      database:
        condition: service_healthy
    environment:
      SERVER_PORT: 8081
      SPRING_PROFILES_ACTIVE: ${PROFILE:-development}
      JWT_SECRET: ${JWT_SECRET:-0eda57f2d956f469c65c42791502137555e85da6ce4b5a889a56fb52ba7ee271}
      JWT_EXPIRATION: ${JWT_EXPIRATION:-3600000}
      COOKIE_DURATION: ${COOKIE_DURATION:-3600}
      SPRING_DATASOURCE_URL: jdbc:postgresql://database:5432/mydatabase
      SPRING_DATASOURCE_USERNAME: myuser
      SPRING_DATASOURCE_PASSWORD: secret
    ports:
      - "8081:8081"
    networks:
      - app-network

  frontend:
    build:
      context: ./company-portal
      dockerfile: Dockerfile
    container_name: frontend_container
    depends_on:
      - backend
    ports:
      - "4200:80"
    networks:
      - app-network
    environment:
      - API_URL=http://backend:8081/

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data: